name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-*"
  pull_request:
    branches:
      - main

jobs:
  build_release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine if this is a release
        id: release_check
        run: |
          IS_RELEASE="false"

          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            IS_RELEASE="true"
          fi

          echo "is_release=${IS_RELEASE}" >> $GITHUB_OUTPUT
          echo "Release: ${IS_RELEASE}"

      - name: Set up yq (for reading Chart.yaml)
        if: steps.release_check.outputs.is_release == 'true'
        uses: mikefarah/yq@v4.45.4

      - name: Extract version from Git tag
        if: steps.release_check.outputs.is_release == 'true'
        id: chart_info
        run: |
          CHART_DIR="deploy/cert-manager-webhook-glesys"
          CHART_NAME=$(yq '.name' "${CHART_DIR}/Chart.yaml")

          GIT_TAG="${{ github.ref }}"
          VERSION=${GIT_TAG#refs/tags/v}

          echo "chart_version=$VERSION" >> $GITHUB_OUTPUT
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT
          echo "chart_name=$CHART_NAME" >> $GITHUB_OUTPUT

          echo "Git tag: $GIT_TAG"
          echo "Version: $VERSION"
          echo "Chart name: $CHART_NAME"

      - name: Install QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.release_check.outputs.is_release == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            # For v*.*.* tags (semver) - both stable and pre-release
            type=semver,pattern=v{{version}},enable=${{startsWith(github.ref, 'refs/tags/v')}}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')}}
            type=semver,pattern=v{{major}},enable=${{startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')}}

            # For all pushes/PRs
            type=sha
            type=ref,event=pr
          flavor: |
            latest=${{ startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-') }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ steps.release_check.outputs.is_release == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "latest"

      - name: Helm Lint
        run: helm lint ./deploy/cert-manager-webhook-glesys

      - name: Helm Package
        if: steps.release_check.outputs.is_release == 'true'
        id: helm_package
        run: |
          CHART_DIR="./deploy/cert-manager-webhook-glesys"
          helm dependency update "$CHART_DIR"
          helm package "$CHART_DIR" --version "${{ steps.chart_info.outputs.chart_version }}" --app-version "${{ steps.chart_info.outputs.app_version }}"
          PACKAGE_NAME="${{ steps.chart_info.outputs.chart_name }}-${{ steps.chart_info.outputs.chart_version }}.tgz"
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "Packaged chart: $PACKAGE_NAME"

      - name: Helm Push
        if: steps.release_check.outputs.is_release == 'true'
        env:
          CHART_PACKAGE: ${{ steps.helm_package.outputs.package_name }}
          OCI_REGISTRY: ghcr.io/${{ github.repository_owner }}/charts
          CHART_NAME: ${{ steps.chart_info.outputs.chart_name }}
        run: |
          echo "Pushing $CHART_PACKAGE to $OCI_REGISTRY/$CHART_NAME"
          helm push "$CHART_PACKAGE" "oci://$OCI_REGISTRY"
